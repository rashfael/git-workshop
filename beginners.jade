---
title: "rixx' Git-Workshop for Beginners"
_content: false
---

extends layouts/presentation

block append head
	title git for beginners

block content
	section
		h1 Git Intro
		h4 for Beginners


	section
		section
			h2 What is a
			h1 Version
				br
				| Control
				br
				| System
		
		section
			h2 Features
			h4 Savepoints
			h4 Co-Op 					
			h4 Safe Experiments

		section
			h1  centralized
			small vs
			h1  distributed

		section
			h3 Centralized
			img.no-border(src='/img/centralized.svg')

		section
			h3 Distributed
			img.no-border(src='/img/decentralized.svg')

	section
		section
			h1 Basics
			h4 git: the Tutorial

		section
			h3 Structure
			img.no-border(src='/img/structure.png')

		section
			h3 Structure
			img.no-border(src='/img/structure02.png')

		section
			h3 “Structure”
			img.no-border(src='img/many-branches-2.png')

		section
			h2 Setup and Configuration
			pre: code.bash(data-trim)
				| git config --global user.name "Edward Stark"

			pre: code.bash(data-trim)
				| git config --global user.email neddie@westeros.co.uk

		section
			h2 git-Areas
			.stage.working
				h5 working directory
			.stage.repo
				h5 repository

		section
			h4 Starting Out
			h2 init
			pre: code.bash(data-trim)
				| git init 				# starts a new repositroy
		

		section
			h4 Working
			h2 Staging Area
			.stage.working
				h5 working directory
			.stage.index.fragment.roll-in
				h5 staging area
			.stage.repo
				h5 repository

		section
			h4 Working
			h2 add, commit
			pre: code.bash(data-trim)
				| git add					# working directory →  staging area
		
			pre: code.bash(data-trim)
				| git commit [--all] [-m 'Message']	# staging area → repo
			blockquote(style="margin-top: 4em")
				| commit early, commit often

		section
			h4 Working
			h2 amend

			pre: code.bash(data-trim)
				| git commit --amend	# amend the latest commit

		section
			h4 Having a look
			h2 status, log, diff
			pre: code.bash(data-trim)
				| git status 			# readable status output

			pre: code.bash(data-trim)
				| git log [--graph]		# Commit history

			pre: code.bash(data-trim)
				| git diff	 		# changes

		section
			h4 make it go away!
			h2 cp, mv, rm, .gitignore, reset

			pre: code.bash(data-trim)
				| git rm [--cached]	 	# Delete files [repository-only]

			pre: code.bash(data-trim)
				| git reset --hard HEAD		# Reset working directory to last commit

		section
			h2 Cheat Sheet

			pre: code.bash(data-trim)
				| git config --global user.name "me myself"

			pre: code.bash(data-trim)
				| git config --global user.email me@myself.com

			pre: code.bash(data-trim)
				| git init 				# starts a new repositroy

			pre: code.bash(data-trim)
				| git add 				# working directory → staging area

			pre: code.bash(data-trim)
				| git commit [--amend] [-m 'Msg']		# staging area → repo

			pre: code.bash(data-trim)
				| git status 				# readable status output

			pre: code.bash(data-trim)
				| git log [--graph]			# Commit history

			pre: code.bash(data-trim)
				| git diff	 			# changes

			pre: code.bash(data-trim)
				| git rm [--cached]	 		# Delete files [repository-only]

			pre: code.bash(data-trim)
				| git reset --hard HEAD			# Reset working directory to last commit

	section
		section
			h1 Branches
			h4 The ones you get to climb when you're grown up

		section
			h2 Demo

		section.cheat-sheet-branching
			h2 Cheat Sheet
			pre: code.bash(data-trim)
				| git branch	 			# List of branches
			pre: code.bash(data-trim)
				| git branch &lt;name&gt;	 		# Create Branch
			pre: code.bash(data-trim)
				| git checkout &lt;name&gt;	 		# Switch to Branch
			pre: code.bash(data-trim)
				| git checkout -b &lt;name&gt;	 		# Create and switch to Branch
			pre: code.bash(data-trim)
				| git branch -d &lt;name&gt;	 		# Delete Branche
			pre: code.bash(data-trim)
				| git merge &lt;name&gt;	 		# Merge Branch &lt;name&gt; into current one
			pre: code.bash(data-trim)
				| git tag &lt;name&gt;	 			# Create a Tag
			pre: code.bash(data-trim)
				| git tag -a &lt;name&gt; -m 'Message'	 	# Create an annotated Tag

	section
		section
			h1 Remotes
			h4 Letting others do the work

		section
			h2 Demo

		section.stash-section
			h4 Bonus-Feature
			h2 stash
			.stage.stash.fragment.roll-in
				h5 stash
			.stage.working
				h5 working directory
			.stage.index
				h5 staging area
			.stage.repo
				h5 repository

			pre: code.bash(data-trim)
				| git stash	 			# Save current changes

			pre: code.bash(data-trim)
				| git stash pop	 			# apply saved changes

		section.cheat-sheet-remote
			h2 Cheat Sheet

			pre: code.bash(data-trim)
				| git clone &lt;adresse&gt; [&lt;name&gt;] 		# copy from remote repository

			pre: code.bash(data-trim)
				| git remote add origin &lt;adresse&gt;	 	# add a remote to existing repository

			pre: code.bash(data-trim)
				| git pull [--rebase]	 		# update from remote [avoid merges]

			pre: code.bash(data-trim)
				| git push	 			# push changes to remote

			pre: code.bash(data-trim)
				| git stash	 			# save current changes

			pre: code.bash(data-trim)
				| git stash pop	 			# apply saved changes

	section
		section
			h1 Rules
			h3 well … guidelines

		section
			h2 Thou shalt not lie
			h4 … or get caught
			ul
				li don't change history others have seen
				li don't force-push

		section
			h2 Thou shalt tell a story
			ul
				li Good commits
				li Good commit messages
				li Good commit ordering


	section
		section
			h4 shhhh, bonus features

		section
			h2 Cheat Sheet: most important git commands

			pre: code.bash(data-trim)
				| git init, git clone    		# new repository

			pre: code.bash(data-trim)
				| git add 	    		# working directory → staging area

			pre: code.bash(data-trim)
				| git commit [--all] [--amend] [-m 'Message']	# staging area → repo

			pre: code.bash(data-trim)
				| git status, git diff		# status output

			pre: code.bash(data-trim)
				| git pull [--rebase]		# pull changes [avoid merges]

			pre: code.bash(data-trim)
				| git push [-u origin master]	# push changes [set default]

			pre: code.bash(data-trim)
				| git branch, git tag		# List of Branches/Tags

			pre: code.bash(data-trim)
				| git merge [branch]		# merge other branch into current one

			pre: code.bash(data-trim)
				| git stash [pop] 		# save current changes [apply again]

			pre: code.bash(data-trim)
				| git reset --hard HEAD		# Reset working directory to last commit

